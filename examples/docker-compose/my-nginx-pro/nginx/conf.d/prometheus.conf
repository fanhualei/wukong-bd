

lua_shared_dict prometheus_metrics 10M;
lua_package_path "/etc/nginx/lua.d/?.lua;;";
init_by_lua '
  prometheus = require("prometheus").init("prometheus_metrics")
  metric_requests = prometheus:counter(
    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
metric_latency = prometheus:histogram("nginx_http_request_duration_seconds", "HTTP request latency status", {"host","server_port", "status", "scheme", "method", "endpoint", "fullurl","remote_addr","body_bytes_sent"})
  metric_connections = prometheus:gauge(
    "nginx_http_connections", "Number of HTTP connections", {"state"})
';
log_by_lua '
  metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
  local host = ngx.var.host
  local fullurl = ngx.unescape_uri(ngx.var.uri)
  local status = ngx.var.status
  local scheme = ngx.var.scheme
  local method = ngx.var.request_method
  local remote_addr = ngx.var.remote_addr
  local body_bytes_sent = ngx.var.body_bytes_sent
  local latency = ngx.var.upstream_response_time or 0
  local server_port = ngx.var.server_port 
  local _, _,  endpoint = string.find(fullurl, "(/[.%w_-]*)")

  metric_latency:observe(tonumber(latency), {host,server_port, status, scheme, method, endpoint, fullurl,remote_addr,body_bytes_sent})
';


server {
  listen 9145;
  #allow 192.168.0.0/16;
  #deny all;
  location /metrics {
    content_by_lua '
      metric_connections:set(ngx.var.connections_reading, {"reading"})
      metric_connections:set(ngx.var.connections_waiting, {"waiting"})
      metric_connections:set(ngx.var.connections_writing, {"writing"})
      prometheus:collect()
    ';
  }
}


